{"version":3,"sources":["todoInfo.js","taskInput.js","taskRow.js","taskList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoInfo","numTasks","this","props","tasks","length","numInProgress","reduce","count","item","seconds","isPaused","isDone","numDone","className","React","Component","TaskInput","state","taskName","handleChange","bind","handleSubmit","event","setState","target","value","onAddTask","preventDefault","onSubmit","type","placeholder","onChange","TaskRow","handleTogglePause","handleToggleDone","formatTime","time","hours","Math","floor","minutes","interval","setInterval","tick","clearInterval","onTogglePause","onToggleDone","buttonLabel","name","onClick","disabled","checked","TaskList","rows","forEach","task","i","push","App","handleAddTask","prevState","id","newTasks","slice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ee6c3b1.chunk.js","sourcesContent":["import React from 'react';\nimport './todoInfo.css';\n\nclass TodoInfo extends React.Component {\n  render() {\n    const numTasks = this.props.tasks.length;\n    const numInProgress = this.props.tasks.reduce((count, item) =>\n      (item.seconds > 0 || (item.seconds === 0 && !item.isPaused)) && !item.isDone ?\n      ++count : count, 0);\n    const numDone = this.props.tasks.reduce((count, item) => item.isDone ? ++count : count, 0);\n\n    return (\n      <div className=\"todoInfo\">\n        <span className=\"label\">TODO:</span>\n        <p>{numTasks} task{numTasks === 1 ? '' : 's'}</p>\n        <ul>\n          <li>{numTasks - numInProgress - numDone} in backlog</li>\n          <li>{numInProgress} in progress</li>\n          <li>{numDone} completed</li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default TodoInfo;\n","import React from 'react';\nimport './taskInput.css';\n\nclass TaskInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {taskName: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({taskName: event.target.value});\n  }\n\n  handleSubmit(event) {\n    if (this.state.taskName !== '') {\n      this.props.onAddTask(this.state.taskName);\n      this.setState({taskName: ''});\n    }\n\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div className=\"taskInput\">\n        <form onSubmit={this.handleSubmit}>\n          <input className=\"bar dark\" type=\"text\" placeholder=\"New task name...\" value={this.state.taskName} onChange={this.handleChange} />\n          <input className=\"add dark\" type=\"submit\" value=\"+\"/>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default TaskInput;\n","import React from 'react';\nimport './taskRow.css';\n\nclass TaskRow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleTogglePause = this.handleTogglePause.bind(this);\n    this.handleToggleDone = this.handleToggleDone.bind(this);\n    this.formatTime = this.formatTime.bind(this);\n  }\n\n  formatTime(time) {\n    var hours = Math.floor(time / 3600);\n    var minutes = Math.floor((time - (hours * 3600)) / 60);\n    var seconds = time - (hours * 3600) - (minutes * 60);\n\n    if (hours < 10) {\n      hours = \"0\" + hours;\n    }\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    if (seconds < 10) {\n      seconds = \"0\" + seconds;\n    }\n\n    return hours + ':' + minutes + ':' + seconds;\n  }\n\n  handleTogglePause() {\n    if (!this.props.isPaused) {\n      clearInterval(this.interval);\n    }\n    else {\n      this.interval = setInterval(() => this.props.tick(), 1000);\n    }\n\n    this.props.onTogglePause();\n  }\n\n  handleToggleDone() {\n    if (!this.props.isPaused) {\n      this.handleTogglePause();\n    }\n\n    this.props.onToggleDone();\n  }\n\n  render() {\n    const buttonLabel = this.props.isPaused ?\n      'START' :\n      'PAUSE';\n\n    const time = this.props.seconds === 0 && this.props.isPaused ?\n      'Not started' :\n      this.formatTime(this.props.seconds);\n\n    return (\n      <tr className={this.props.isDone ? 'taskRow done' : 'taskRow'}>\n        <td><span className={this.props.isDone ? 'done' : ''}>{this.props.name}</span></td>\n        <td><span className={this.props.isPaused ? 'paused' : ''}>{time}</span></td>\n        <td><button onClick={this.handleTogglePause} disabled={this.props.isDone ? 'disabled' : ''}>{buttonLabel}</button></td>\n          <td><input type=\"checkbox\" checked={this.props.isDone ? 'checked' : ''} onChange={this.handleToggleDone}/></td>\n      </tr>\n    );\n  }\n}\n\nexport default TaskRow;\n","import React from 'react';\nimport './taskList.css';\nimport TaskRow from './taskRow';\n\nclass TaskList extends React.Component {\n  render() {\n    const rows = [];\n    this.props.tasks.forEach((task, i) => {\n      rows.push(\n        <TaskRow key={i}\n          name={task.name}\n          seconds={task.seconds}\n          isPaused={task.isPaused}\n          isDone={task.isDone}\n          onTogglePause={() => this.props.onTogglePause(i)}\n          onToggleDone={() => this.props.onToggleDone(i)}\n          tick={() => this.props.tick(i)} />\n      );\n    });\n\n    return (\n      <div className=\"taskList\">\n        <table>\n          <thead>\n            <tr>\n              <th>Task</th>\n              <th>Elapsed time</th>\n              <th>Timer</th>\n              <th>Done?</th>\n            </tr>\n          </thead>\n          <tbody>{rows}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default TaskList;\n","import React from 'react';\nimport './App.css';\nimport TodoInfo from './todoInfo';\nimport TaskInput from './taskInput';\nimport TaskList from './taskList';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {tasks: []};\n\n    this.handleAddTask = this.handleAddTask.bind(this);\n    this.handleTogglePause = this.handleTogglePause.bind(this);\n    this.handleToggleDone = this.handleToggleDone.bind(this);\n    this.tick = this.tick.bind(this);\n  }\n\n  handleAddTask(taskName) {\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, {\n        'name': taskName,\n        'seconds': 0,\n        'isPaused': true,\n        'isDone': false\n      }]\n    }));\n  }\n\n  tick(id) {\n    const newTasks = this.state.tasks.slice();\n    newTasks[id].seconds++;\n    this.setState({\n      tasks: newTasks\n    });\n  }\n\n  handleTogglePause(id) {\n    const newTasks = this.state.tasks.slice();\n    newTasks[id].isPaused = !newTasks[id].isPaused;\n    this.setState({\n      tasks: newTasks\n    });\n  }\n\n  handleToggleDone(id) {\n    const newTasks = this.state.tasks.slice();\n    newTasks[id].isDone = !newTasks[id].isDone;\n    this.setState({\n      tasks: newTasks\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header dark\">\n          <h1>Daily Questboard</h1>\n        </header>\n        <div className=\"row\">\n          <div className=\"col-2\">\n              <div className=\"panel light\">\n              <TodoInfo tasks={this.state.tasks}/>\n              <TaskInput onAddTask={this.handleAddTask} />\n            </div>\n          </div>\n          <div className=\"col-10\">\n            <div className=\"panel light\">\n              <TaskList tasks={this.state.tasks}\n                onTogglePause={this.handleTogglePause}\n                onToggleDone={this.handleToggleDone}\n                tick={this.tick} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}